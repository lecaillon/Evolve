pool:
  vmImage: Hosted Ubuntu 1604
steps:
- script: './build.sh --target=clean'
  displayName: Clean

- task: Docker@1
  displayName: 'Install SQL Server'
  inputs:
    containerregistrytype: 'Container Registry'
    command: 'Run an image'
    imageName: 'microsoft/mssql-server-linux:latest'
    containerName: 'mssql-evolve'
    ports: '1433:1433'
    envVars: |
     ACCEPT_EULA=Y
     SA_PASSWORD=Password12!

- task: Docker@1
  displayName: 'Install Cassandra'
  inputs:
    containerregistrytype: 'Container Registry'
    command: 'Run an image'
    imageName: 'cassandra:latest'
    containerName: 'cassandra-evolve'
    ports: '9042:9042'
    envVars: |
     CASSANDRA_CLUSTER_NAME=evolve
     CASSANDRA_DC=dc1
     CASSANDRA_RACK=rack1

- task: Docker@1
  displayName: 'Install PostgreSQL'
  inputs:
    containerregistrytype: 'Container Registry'
    command: 'Run an image'
    imageName: 'postgres:alpine'
    containerName: 'postgres-evolve'
    ports: '5432:5432'
    envVars: |
     POSTGRES_PASSWORD=Password12!
     POSTGRES_DB=my_database

- task: DotNetCoreCLI@2
  displayName: 'Dotnet info'
  inputs:
    command: custom
    custom: '--info'

- script: './build.sh --target=linux-build'
  displayName: Build

- script: 'mysql -e "create database my_database;" --user=root'
  displayName: 'Create MySQL database'
  env:
    MYSQL_PWD: root

- script: './build.sh --target=test'
  displayName: Test
  continueOnError: true

- script: './build.sh --target=linux-publish-cli'
  displayName: 'Publish CLI'

- script: './build.sh --target=linux-warp-cli'
  displayName: 'Warp CLI'

- script: './build.sh --target=test-cli'
  displayName: 'Test CLI'
  continueOnError: true

- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: '*.trx'
    searchFolder: '$(build.sourcesdirectory)/publish'
    failTaskOnFailedTests: true

- script: './build.sh --target=report-coverage'
  displayName: 'Report coverage'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage results'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(build.sourcesdirectory)/publish/coverage/Cobertura.xml'
    reportDirectory: '$(build.sourcesdirectory)/publish/coverage'

- task: PublishPipelineArtifact@0
  displayName: 'Publish artifacts'
  inputs:
    artifactName: dist
    targetPath: dist